ymaps.ready(function () {

    fetch('open.json')
        .then(response => response.json())
        .then(obj => {

            console.log(obj);
            const searchControls = new ymaps.control.SearchControl({
                options: {
                    float: 'right',
                    noPlacemark: true
                }
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
            const myMap = new ymaps.Map("map", {
                center: [59.9343, 30.3351], // –¶–µ–Ω—Ç—Ä –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞
                zoom: 10, // –£—Ä–æ–≤–µ–Ω—å –∑—É–º–∞
                controls: [searchControls]
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            const removeControls = [
                'geolocationControl',
                'trafficControl',
                'fullscreenControl',
                'zoomControl',
                'rulerControl',
                'typeSelector'
            ];

            const clearTheMap = myMap => {
                removeControls.forEach(controls => myMap.controls.remove(controls));
            };

            clearTheMap(myMap);

            // –°–æ–∑–¥–∞–Ω–∏–µ ObjectManager –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
            const objectManager = new ymaps.ObjectManager({
                clusterize: true,
                clusterIconLayout: "default#pieChart"
            });

            // –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü (–æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
            let minLatitude = Infinity, maxLatitude = -Infinity;
            let minLongitude = Infinity, maxLongitude = -Infinity;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            obj.features.forEach(feature => {
                if (feature.geometry && feature.geometry.coordinates) {
                    const [longitude, latitude] = feature.geometry.coordinates;
                    feature.geometry.coordinates = [latitude, longitude];  // –ú–µ–Ω—è–µ–º –¥–æ–ª–≥–æ—Ç—É –∏ —à–∏—Ä–æ—Ç—É –º–µ—Å—Ç–∞–º–∏

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    minLatitude = Math.min(minLatitude, latitude);
                    maxLatitude = Math.max(maxLatitude, latitude);
                    minLongitude = Math.min(minLongitude, longitude);
                    maxLongitude = Math.max(maxLongitude, longitude);
                }
            });

            // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ObjectManager –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            objectManager.removeAll();

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ objectManager
            objectManager.add(obj);

            // –î–æ–±–∞–≤–ª—è–µ–º objectManager –Ω–∞ –∫–∞—Ä—Ç—É
            myMap.geoObjects.add(objectManager);

            // üëâ –ë–ª–æ–∫ —Å setBounds –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, —Ü–µ–Ω—Ç—Ä –≤—Å–µ–≥–¥–∞ –°–ü–±
            /*
            if (minLatitude !== Infinity && maxLatitude !== -Infinity &&
                minLongitude !== Infinity && maxLongitude !== -Infinity) {
                const bounds = [
                    [minLatitude, minLongitude],  // –ù–∏–∑—à–∞—è —Ç–æ—á–∫–∞
                    [maxLatitude, maxLongitude]   // –í—ã—Å—à–∞—è —Ç–æ—á–∫–∞
                ];
                myMap.setBounds(bounds, {
                    checkZoomRange: true
                });
            }
            */
        });
});
